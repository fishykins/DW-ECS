#include "Assets\Planetary Terrain\Scripts\ComputeShaders\FastNoiseGPU.compute"
#include "Assets\Planetary Terrain\Scripts\ComputeShaders\NoiseOperatorsGPU.compute"


float scale;
float3 trPosition;
float radius;
float4 rotation;
float noiseDiv;

float3 RotateVector(float4 q, float3 v)
{

    float num = q.x * 2.0;
    float num2 = q.y * 2.0;
    float num3 = q.z * 2.0;
    float num4 = q.x * num;
    float num5 = q.y * num2;
    float num6 = q.z * num3;
    float num7 = q.x * num2;
    float num8 = q.x * num3;
    float num9 = q.y * num3;
    float num10 = q.w * num;
    float num11 = q.w * num2;
    float num12 = q.w * num3;

    float3 result;
    result.x = (1.0 - (num5 + num6)) * v.x + (num7 - num12) * v.y + (num8 + num11) * v.z;
    result.y = (num7 + num12) * v.x + (1.0 - (num4 + num6)) * v.y + (num9 - num10) * v.z;
    result.z = (num8 - num11) * v.x + (num9 + num10) * v.y + (1.0 - (num4 + num5)) * v.z;

    return result;
}

~

RWStructuredBuffer<float3> dataBuffer;

#pragma kernel ComputePositions

[numthreads(245, 1, 1)] void ComputePositions(uint3 id
                                              : SV_DispatchThreadID) {
    dataBuffer[id.x] *= scale;
    dataBuffer[id.x] = RotateVector(rotation, dataBuffer[id.x]);

    dataBuffer[id.x] += trPosition;
    dataBuffer[id.x] = normalize(dataBuffer[id.x]); 
    float height = GetNoise(-dataBuffer[id.x].x, dataBuffer[id.x].y, -dataBuffer[id.x].z);
    dataBuffer[id.x] *= radius;
    dataBuffer[id.x] -= trPosition;

    dataBuffer[id.x] *= (noiseDiv + height) / noiseDiv;
}


#pragma kernel ComputeHeightmap

[numthreads(256, 1, 1)] void ComputeHeightmap(uint3 id: SV_DispatchThreadID) {
    
    dataBuffer[id.x].x = GetNoise(dataBuffer[id.x].x, dataBuffer[id.x].y, dataBuffer[id.x].z);
    
}