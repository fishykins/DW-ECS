

float Select (float cv, float nmax, float n) {
	
	return max(min((n * (cv - nmax) + 0.5), 1), 0);
}


static float CubicInterpolation(float n0, float n1, float n2, float n3, float a)
{
    return n1 + 0.5 * a * (n2 - n0 + a * (2 * n0 - 5 * n1 + 4 * n2 - n3 + a * (3 * (n1 - n2) + n3 - n0)));
}


float Curve (float time, float times[25], float values[25]) {
	
	time = (time + 1) / 2;

	int index;
    for (index = 0; index < 25; index++)
    {
        if (time < times[index])
            break;
    }

    int index0 = clamp(index - 2, 0, 24);
    int index1 = clamp(index - 1, 0, 24);
    int index2 = clamp(index, 0, 24);
    int index3 = clamp(index + 1, 0, 24);
		
	float alpha = (time - times[index1]) / (times[index2] - times[index1]);

	return (CubicInterpolation(values[index0], values[index1], values[index2], values[index3], alpha) * 2) - 1;
}



